---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## <headers/>

## PROJECT RULES

### GENERAL

-   The AI coding assistant must always follow instructions precisely.
-   The AI coding assistant must adhere to all project rules, coding standards, workflow guidelines, and best practices defined in this file.
-   The AI coding assistant must make sure files are not getting too large. If so, propose breaking down into smaller components and re-organizing it;
-   Always use a CLI or a command to install dependencies or kickstart the project. Don't populate the dependencies of the project automatically.
-   When a user clicks to add a link, the link should be sent to OpenAI to get a title and quick summary to be added to the newsletter later.
    -   Titles should be short and concise, focusing on directly stating what the model is.
    -   Summaries should relate the news to the context of the newsletter "Coding with AI".
-   All API Key setup must be on a dedicated settings page, accessible via a toggle in the header. If a feature requires a key that is not set, show a warning on the page with a button to open the settings.
-   The "add links" feature must be super easy to use on mobile. The goal is to make submitting a link from a phone as quick as possible, ideally as simple as sending a WhatsApp message.
-   The "Add Links" modal should be accessible via URL, so that it can be opened easily on mobile.
-   The application should always use the custom prompts edited in the settings page when summarizing links.

### CONFLICT RESOLUTION

-   If a new rule conflicts with an existing one, resolve it by clarifying the final, decided rule, OR highlight that further user confirmation is needed.

## TECH STACK

-   Next.js 15
-   React
-   Typescript
-   Tailwind CSS v4
-   Github API
-   OpenAI GPT-4
-   Kit.com API
-   axios
-   date-fns
-   lucide-react
-   @dnd-kit/core
-   @dnd-kit/sortable
-   @dnd-kit/utilities
-   react-contenteditable
-   lodash.debounce

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

-   All project rules, coding standards, workflow guidelines, references, documentation structures, and best practices are defined in this file.

## WORKFLOW & RELEASE RULES

### VERSION CONTROL

-   Use clear and concise commit messages.

### DEPLOYMENT

-   Project is deployable to Vercel.
-   The app uses serverless functions and works perfectly on Vercel's free tier.
-   The app is a standard Next.js application and can be deployed to: Netlify, Railway, DigitalOcean App Platform, or any platform supporting Node.js.

### POST-NEWSLETTER ACTIONS

-   After exporting the newsletter, prompt the user to archive all used links. This allows them to start fresh for the next newsletter.

## DEBUGGING

-   Ensure your repository is public or your token has the right permissions.
-   Verify `GITHUB_OWNER` and `GITHUB_REPO` environment variables are correct.
-   Check that your Personal Access Token hasn't expired.
-   Verify your API key is valid and has credits.
-   Check the model name in `src/lib/openai.ts` (defaults to `gpt-4`).
-   Verify your API key is valid.
-   Check that the email template ID exists in your account.
-   Make sure Tailwind CSS is working by checking if basic utility classes apply.
-   Try clearing Next.js cache: `rm -rf .next` and `npm run dev`.
- The API call is missing the GitHub configuration headers
-   String contains non ISO-8859-1 code point error: Occurs because HTTP headers can only contain ISO-8859-1 characters, but the custom prompt might contain special characters, emojis, or other Unicode characters. Ensure the custom prompt is encoded (base64) before sending it as a header.

## CODING STANDARDS

### TYPESCRIPT

-   Define explicit types for function parameters and return values.

### TAILWIND CSS

-   Modify styles in `src/app/globals.css` or component files.
-   Make sure you update the cursor when hovering a clickable element.
-   Modern Button System:
    -   `.btn`: Base class for all buttons.
    -   `.btn-primary`: Primary button style.
    -   `.btn-secondary`: Secondary button style.
    -   `.btn-ghost`: Ghost button style.
    -   `.btn-sm`: Small button size.
    -   `.btn-lg`: Large button size.
-   Modern Card System:
    -   `.card`: Base class for all cards.
    -   `.card-padding`: Standard card padding.
    -   `.card-padding-sm`: Small card padding.
    -   `.card-padding-lg`: Large card padding.
-   Modern Input System:
    -   `.input`: Base class for all input fields.
-   Typography:
    -   `.text-display`: Display text style.
    -   `.text-title`: Title text style.
    -   `.text-heading`: Heading text style.
    -   `.text-body`: Body text style.
    -   `.text-caption`: Caption text style.
-   Status Messages:
    -   `.status-success`: Success message style.
    -   `.status-error`: Error message style.
    -   `.status-warning`: Warning message style.
-   Utilities:
    -   `.container`: Standard page container.
    -   `.container-sm`: Smaller page container.
    -   `.divider`: Horizontal divider line.
    -   `.section-spacing`: Standard section spacing.
    -   `.section-spacing-sm`: Smaller section spacing.
    -   `.section-spacing-lg`: Larger section spacing.

### REACT

-   Adhere to React best practices for component structure and data flow.
-   To prevent focus loss and unnecessary re-renders, always define components outside of the parent component's render function. Defining components inside another component causes them to be recreated on every render, leading to state loss and UI instability.

### API ROUTES

-   Handle errors gracefully in API routes.
-   Return informative error messages to the client.
-   API calls must include GitHub configuration headers.

### GITHUB API

-   Handle GitHub API authentication and errors properly.

### OPENAI API

-   Handle OpenAI API authentication and errors properly.

## FILE STRUCTURE

-   Project uses the standard Next.js file structure.
-   GitHub repository structure:

```text
your-newsletter-data-repo/
‚îú‚îÄ‚îÄ links/
‚îÇ   ‚îî‚îÄ‚îÄ 2025/
‚îÇ       ‚îî‚îÄ‚îÄ 01/           # Month-based organization
‚îÇ           ‚îî‚îÄ‚îÄ links.json
‚îú‚îÄ‚îÄ links/archive/
‚îÇ   ‚îî‚îÄ‚îÄ 2025/
‚îÇ       ‚îî‚îÄ‚îÄ 06/           # Month-based organization
‚îÇ       ‚îî‚îÄ‚îÄ archived-links.json
‚îî‚îÄ‚îÄ newsletters/
    ‚îî‚îÄ‚îÄ 2025-W03/         # Week-based organization
        ‚îî‚îÄ‚îÄ newsletter.json
```

## NEWSLETTER TEMPLATE

-   The AI generates newsletters with this structure:
    -   üõ†Ô∏è AI Tools Worth Checking Out: New AI tools you've saved
    -   ü§ñ New AI Models to Explore: Latest AI models
    -   üìö Interesting Reads: Articles and other content
    -   üí≠ Weekly Learnings & Insights: Your condensed thoughts and reflections
- The AI is inspired by "the news" style.
-   The newsletter should be structured like this:
    1.  Friendly greeting/intro paragraph (like "nada sozinho" style)
    2.  "This Week's Edition" summary with bullet points of what's included
    3.  Individual sections with clear headers and emojis
    4.  Personal, approachable, and genuinely helpful tone
-   Newsletter tone: Direct, straight to the point, stoic yet friendly.
    -   Pre-links: Max one line.
    -   Links list: Title of the link in bold (clickable), followed by the summary underneath. No extra context needed.
    -   Footer: One line asking for feedback.

## USER INTERFACE & USER EXPERIENCE

-   The UI and UX of this project should emulate design principles from Linear, Motion UI, Uber, and Airbnb.
-   The UI and UX of this project must be simple, minimal, and intuitive, without being overwhelming.
-   The UI and UX must feel modern, without being too over the top.
-   The user experience should feel like the user is following a story.
-   The homepage UI/UX should be revamped to create a more product-focused, story-driven experience.
-   If everything is setup (e.g., API keys), the settings should not be visible to the user. We should only show about the API keys in case the user has never set it up.
-   The homepage must adapt based on user configuration status.
-   The homepage should implement smart routing: unconfigured users go to settings, configured users to main features.
-   The homepage should have a clear narrative: "Collect ‚Üí Generate ‚Üí Export".
-   The main flows of the homepage should be prominently displayed as the primary story, with secondary features (past newsletters) appropriately de-emphasized.
-   The homepage should have direct, action-oriented copy: "Build your newsletter in minutes".
-   The homepage should have a card-based layout with subtle interactions.
-   The homepage should maintain consistent spacing and typography using existing design system.
-   The homepage should use a neutral color palette with purposeful contrast.
-   The homepage should have subtle process indicator for configured users.
-   The homepage should have clear calls-to-action that guide users to the right next step.
-   The homepage should have hover states with subtle color transitions.
-   The card-based navigation on the homepage should feel native to product tools.
-   The homepage should implement progressive enhancement for different user states.
-   Ensure every page is mobile-friendly.
-   The "add links" feature must be super easy to use on mobile, with a simplified flow, auto-focus, and a mobile-first design.
    -   On mobile, the modal should slide up from the bottom like WhatsApp.
    -   The modal should take up the full screen on mobile for maximum usability.
    -   All buttons and inputs should be sized for fingers, not cursors.
    -   The URL input should get focus immediately when opened.
    -   The experience should be as simple as: Tap floating + button (or header button), Paste URL (auto-detects category), Tap category if needed (visual selection), Hit Enter or tap Save.
-   The Build page's UI should be intuitive, work well on mobile and have some joy to use it, inspired by Arc from the Browser Company, Motion UI and Linear.
    -   Consider the flow: Sorting Links, Adding Thoughts, Adding more info to the AI Prompt (this is optional, maybe can be hidden under a button), View and Edit Preview, Export.
    -   The flow should be joyful, yet not colorful, focusing on user experience.
    -   The preview box should be a bit wider on desktop, otherwise it will be too cropped.

## LINKS PAGE

-   Links on the links page (`@page.tsx`) must be displayed in a table format with tabs for "Active Links" and "Archived Links".
-   The "Archived Links" button should be a tab on the table.
-   The "Create Newsletter" CTA must be removed from the bottom of the links page.
-   A lazy-loaded view for archived links must be implemented.
    -   Archived links are retrieved from the `links/archive/` directory structure.
-   Ensure `cursor-pointer` is applied to all clickable elements: tab buttons, link URLs (both active and archived), action buttons (open link, delete link), modal buttons (Cancel, AI Summarize, Save Link), and the "Add Your First Link" button.
-   Auto-summarization:
    -   Auto-summarization is optional and disabled by default.
    -   The "Auto-summarization" toggle is displayed in the OpenAI API section of the settings page.
    -   The toggle is only shown when an OpenAI API key is configured.
    -   The default state is disabled (false).
    -   The setting is saved as `auto_summarize` in localStorage.
    -   The links page loads the auto-summarization preference on page load.
    -   Auto-summarization is only triggered when:
        -   URL is pasted
        -   OpenAI API key exists
        -   Auto-summarization is enabled in settings
        -   Title and description are empty
        -   1 second delay has passed
    -   The "‚ú® Auto-fill with AI" button is always available regardless of the setting.
-   When summarizing links, the custom prompt from `localStorage` will be sent in the `X-Custom-Prompt` header to the backend. If no prompt is found, the backend's default will be used.
    -   The custom prompt must be base64 encoded before being sent as the `X-Custom-Prompt` header due to HTTP header restrictions on ISO-8859-1 characters.
-   A backend is required to fetch webpage content for link summarization due to CORS restrictions in browsers.
-   The description is no longer being cropped, let the Newsletter generation crop it later on
-   The links page must be fully mobile-friendly.
    -   The header must stack vertically on mobile to prevent overflow.
    -   The header title and badge should wrap properly without breaking the layout.
    -   The "Add Link" button should be hidden on mobile in favor of the floating action button.
-   The Add Link modal must be fully mobile-optimized.
    -   The modal should take up the full height on mobile for better usability.
    -   All buttons and inputs should have increased padding (`py-4`) for finger-friendly interaction.
    -   There should be better spacing between form elements for a cleaner mobile experience.
    -   The `touch-manipulation` CSS property should be added for responsive touch feedback.
    -   The modal should close when tapping outside the content area.
-   The floating action button should be enhanced for mobile.
    -   The size should be increased from 56px to 64px (`w-16 h-16`) for easier tapping.
    -   The plus icon should be increased to `w-7 h-7` for better visibility.
    -   The button should only be visible on mobile (`sm:hidden`) to avoid redundancy.
-   The table layout should be improved for mobile responsiveness.
    -   Tables should scroll horizontally when content exceeds screen width.
    -   Appropriate column widths should be set to prevent cramped layouts.
    -   The scrollable area should extend edge-to-edge for a better mobile scrolling experience.
-   Safe area support should be added for devices with home indicators.
-   Category buttons should have increased padding for easier selection on mobile.
-   Input fields should have larger heights for a better mobile typing experience.

## BUILD PAGE

-   All links must be automatically selected by default.
-   The newsletter preview should be editable after generation and before export.
-   The order of links in the newsletter should be easily sortable, potentially via drag-and-drop functionality.
-   Drag-and-Drop Link Sorting:
    -   Use `@dnd-kit` library for smooth drag-and-drop functionality
    -   Create a `SortableLinkItem` component with drag handles (‚ãÆ‚ãÆ)
    -   Links can be reordered by dragging them up or down
    -   Visual feedback with opacity changes during dragging
-   Editable Newsletter Preview:
    -   Add an "Edit" button next to the Newsletter Preview title
    -   When clicked, transform the preview into an editable rich-text area
    -   Use `react-contenteditable` for in-place editing
    -   Add a "Save Changes" button to confirm edits
    -   All export functions (JSON, Kit.com, Copy) should use the edited content
-   The "Generate Newsletter" button should be moved below the preview section.
    -   The button should be visible even if no links are selected, but it should be disabled in this case.
-   The preview box should be wider on desktop.
-   Step-by-Step Flow:
    -   **REMOVED**: Step indicators from the navbar are no longer needed.
-   Improved Link Selection:
    -   Beautiful card design with hover effects and smooth transitions
    -   Custom selection indicators replacing checkboxes with circular indicators
    -   Enhanced drag handles that appear on hover
    -   Better visual hierarchy with improved spacing and typography
-   Mobile-First Experience:
    -   Responsive layout that works perfectly on all screen sizes
    -   Touch-friendly interactions with proper sizing
-   Advanced Features:
    -   Collapsible AI Instructions section to keep the interface clean
    -   Smooth animations and transitions throughout
    -   Better visual feedback for all states (loading, generating, etc.)
    -   Improved spacing and typography following Linear's design principles
-   Arc Browser & Motion UI Inspiration:
    -   Clean, minimal design without overwhelming colors
    -   Subtle interactions with smooth hover states
    -   Thoughtful spacing and visual hierarchy
    -   Delightful micro-animations that feel natural
    -   Focus on workflow rather than visual noise
-   Key UX Improvements:
    1.  Clear progression - Users always know where they are in the process
    2.  Optional complexity - Advanced features are hidden until needed
    3.  Mobile optimized - Works beautifully on phones with dedicated CTAs
    4.  Visual consistency - Every element follows the same design language
    5.  Joyful but professional - Engaging without being playful
-   The interface should feel like a premium productivity tool, similar to Linear or Arc Browser, while maintaining focus on the core workflow of building newsletters efficiently.
-   Remove the Sparkle emoji when generating a newsletter (loading)
-   After the newsletter has been generated, the generate button should say "regenerate" and should be near the preview box, not under the export box. Maybe it could even be side-by-side the edit button.
    -   The generate button should only appear when there's no content generated yet.

## PROJECT SCOPE

-   Save links: Feature to save links as you find them interesting. These will be saved in a Github Repository for you to use later
-   Generate Newsletter: Review the links you saved and sort them to add them to your newsletter.
-   Auto-summary: Creates a simple summary of the links you saved using AI;
-   Kit.com integration: Automatically creates a draft of the newsletter on Kit.com
-   Export as JSON or Clipboard
-   Archive links after exporting a newsletter so that you can start your next newsletter fresh

## OPENAI PROMPT CUSTOMIZATION

-   Users can customize the prompts used for summarizing links and generating newsletters.
-   Both prompts are editable on the Settings page, within the OpenAI section.
-   Users can add an additional improvement to the newsletter generation prompt directly on the Generate NEwsletter page.
    -   This allows for specific adjustments to the newsletter's content or organization.
    -   The user can specify the order or organization of links within this additional prompt.
-   The user cannot break the prompt.
-   The link summarization prompt is customizable, but the final prompt must always adhere to the system's required JSON format.
    -   Even if the user requests a different format, the final prompt must follow the system format:

```json
{
  "title": "Direct factual title",
  "summary": "How this helps with coding/AI development"
}
```
-   The HTML link formatting requirements (`**<a href="URL">Title</a>**`) are automatically appended to any custom newsletter generation prompt.

## BUILD PAGE UI/UX

-   The Build page's UI should be intuitive, work well on mobile and have some joy to use it, inspired by Arc from the Browser Company, Motion UI and Linear.
    -   Consider the flow: Sorting Links, Adding Thoughts, Adding more info to the AI Prompt (this is optional, maybe can be hidden under a button), View and Edit Preview, Export.
    -   The flow should be joyful, yet not colorful, focusing on user experience.
    -   The preview box should be a bit wider on desktop, otherwise it will be too cropped.

## SETTINGS PAGE UI/UX

-   Instead of automatic saving for the prompt text areas on the Settings page, add a simple "save" button near the text area and remove the automatic saving from these fields.
-   Improve the summary prompt, so that we can generate a few highlights from the AI Models and tools. For example, here is a good summary for one AI Model:

```text
Magistral by Mistral AI: This is Mistral AI's first reasoning model, designed to excel in "domain-specific, transparent, and multilingual reasoning".
‚ó¶It's released in two variants: Magistral Small (24B parameter, open-source under Apache 2.0 license) and Magistral Medium (more powerful enterprise version).
‚ó¶ Magistral excels in "chain-of-thought" reasoning across global languages, providing a traceable thought process for better interpretability.
‚ó¶ It boasts 10x faster token throughput in Le Chat compared to many competitors, enabling real-time reasoning.
‚ó¶ Applications span from regulated industries (legal, finance, healthcare) requiring auditable conclusions, to software development (improving project planning, architecture, and design through multi-step actions), and creative writing.
‚ó¶ Magistral Small is available for self-deployment via Hugging Face, while Magistral Medium is accessible via Le Chat preview, API, and cloud marketplaces
```
-   For the prompt text areas on the Settings page: add a "reset" button to revert to the default prompt and add a bit of spacing between the save button and the description.
-   The settings page should no longer scroll and lose focus on the input whenever anything is typed into the text areas.
    -   Removed the auto-save notification logic from all the prompt-related functions (save and reset).
    -   Moved Default Prompts Outside Component: The default prompts are now defined outside the component function, so they won't be recreated on every render.
    -   Removed useEffect Dependencies: The useEffect now has an empty dependency array `[]`, so it only runs once on mount instead of on every render.
    -   Eliminated Re-render Triggers: The save/reset functions don't trigger the auto-save notification, and the useEffect no longer causes unnecessary re-renders.
    -   Removed Auto-Save Notification State: Eliminated `lastSaved` and `showSaved` state variables
    -   Removed Notification Logic: Removed all the code that was triggering state changes and timeouts in the `updateSetting` function
    -   Removed Notification UI: Removed the notification display from the JSX
    -   Cleaned Up Imports: Removed the unused `Check` icon import
-   The solution is to separate the "draft" state of the inputs from the "saved" state by:
    1.  Creating a second `localSettings` state. This will be updated instantly as you type, providing immediate feedback without lag or focus loss.
    2.  The `value` of each input will be tied to this `localSettings` state.
    3.  Using a `useEffect` hook to watch for changes in `localSettings`. When you stop typing for a moment, it will automatically save the changes to localStorage and the main `settings` state in the background.
-   The issue is that the auto-save notification is triggering page reflows or the `showSaved` state change is causing the component to re-render and lose focus.
-   The issue is likely that the `updateSetting` function is still being called somewhere, or there could be other re-renders happening.
-   The issue might be that the `updateSetting` function is still being called somewhere, or there could be other re-renders happening.
-   Every time any input changes, it triggers the `showSaved` state change, which causes a re-render and layout shift that makes the page lose focus and scroll.
-   The focus loss is still happening because the `updateSetting` function is calling `setSettings`, which triggers a re-render of the entire component. When the component re-renders, React recreates the input elements and loses focus.
-   The issue is that updating the main `settings` state on every keystroke forces React to re-render the entire page, which causes the input to lose focus. The `setTimeout` was a clumsy attempt to fix this, but it just delayed the problem and introduced lag.
-   The inputs are still losing focus after typing anything.
-   There is a conflict between the "draft" state that you are typing into (`localSettings`) and the "saved" state that controls parts of the UI (`settings`).
    -   When you type, `localSettings` updates instantly. But the section for "AI Prompt Customization" only appears based on the *saved* `settings.openaiApiKey`. When my auto-save logic finally updates the main `settings` state, React sees that the `settings` object has changed and it re-renders the component, causing the input to lose focus.
-   The application must always use the prompt saved on the client side for summarizing links. If no prompt is found, the backend's default will be used.
-   A backend is required to fetch webpage content for link summarization due to CORS restrictions in browsers, web scraping needs, and the need for proper headers.
-   The newsletter generation route must also use the user's custom prompt.