---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## <headers/>

## PROJECT RULES

### GENERAL

-   The AI coding assistant must always follow instructions precisely.
-   The AI coding assistant must adhere to all project rules, coding standards, workflow guidelines, and best practices defined in this file.
-   Always use a CLI or a command to install dependencies or kickstart the project. Don't populate the dependencies of the project automatically.
-   When a user clicks to add a link, the link should be sent to OpenAI to get a title and quick summary to be added to the newsletter later.
    -   Titles should be short and concise, focusing on directly stating what the model is.
    -   Summaries should relate the news to the context of the newsletter "Coding with AI".
-   All API Key setup must be on a dedicated settings page, accessible via a toggle in the header. If a feature requires a key that is not set, show a warning on the page with a button to open the settings.
-   The "add links" feature must be super easy to use on mobile. The goal is to make submitting a link from a phone as quick as possible, ideally as simple as sending a WhatsApp message.
-   The "Add Links" modal should be accessible via URL, so that it can be opened easily on mobile.

### CONFLICT RESOLUTION

-   If a new rule conflicts with an existing one, resolve it by clarifying the final, decided rule, OR highlight that further user confirmation is needed.

## TECH STACK

-   Next.js 15
-   React
-   Typescript
-   Tailwind CSS v4
-   Github API
-   OpenAI GPT-4
-   Kit.com API
-   axios
-   date-fns
-   lucide-react
-   @dnd-kit/core
-   @dnd-kit/sortable
-   @dnd-kit/utilities
-   react-contenteditable

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

-   All project rules, coding standards, workflow guidelines, references, documentation structures, and best practices are defined in this file.

## WORKFLOW & RELEASE RULES

### VERSION CONTROL

-   Use clear and concise commit messages.

### DEPLOYMENT

-   Project is deployable to Vercel.
-   The app uses serverless functions and works perfectly on Vercel's free tier.
-   The app is a standard Next.js application and can be deployed to: Netlify, Railway, DigitalOcean App Platform, or any platform supporting Node.js.

### POST-NEWSLETTER ACTIONS

-   After exporting the newsletter, prompt the user to archive all used links. This allows them to start fresh for the next newsletter.

## DEBUGGING

-   Ensure your repository is public or your token has the right permissions.
-   Verify `GITHUB_OWNER` and `GITHUB_REPO` environment variables are correct.
-   Check that your Personal Access Token hasn't expired.
-   Verify your API key is valid and has credits.
-   Check the model name in `src/lib/openai.ts` (defaults to `gpt-4`).
-   Verify your API key is valid.
-   Check that the email template ID exists in your account.
-   Make sure Tailwind CSS is working by checking if basic utility classes apply.
-   Try clearing Next.js cache: `rm -rf .next` and `npm run dev`.

## CODING STANDARDS

### TYPESCRIPT

-   Define explicit types for function parameters and return values.

### TAILWIND CSS

-   Modify styles in `src/app/globals.css` or component files.
-   Make sure you update the cursor when hovering a clickable element.
-   Modern Button System:
    -   `.btn`: Base class for all buttons.
    -   `.btn-primary`: Primary button style.
    -   `.btn-secondary`: Secondary button style.
    -   `.btn-ghost`: Ghost button style.
    -   `.btn-sm`: Small button size.
    -   `.btn-lg`: Large button size.
-   Modern Card System:
    -   `.card`: Base class for all cards.
    -   `.card-padding`: Standard card padding.
    -   `.card-padding-sm`: Small card padding.
    -   `.card-padding-lg`: Large card padding.
-   Modern Input System:
    -   `.input`: Base class for all input fields.
-   Typography:
    -   `.text-display`: Display text style.
    -   `.text-title`: Title text style.
    -   `.text-heading`: Heading text style.
    -   `.text-body`: Body text style.
    -   `.text-caption`: Caption text style.
-   Status Messages:
    -   `.status-success`: Success message style.
    -   `.status-error`: Error message style.
    -   `.status-warning`: Warning message style.
-   Utilities:
    -   `.container`: Standard page container.
    -   `.container-sm`: Smaller page container.
    -   `.divider`: Horizontal divider line.
    -   `.section-spacing`: Standard section spacing.
    -   `.section-spacing-sm`: Smaller section spacing.
    -   `.section-spacing-lg`: Larger section spacing.

### REACT

-   Adhere to React best practices for component structure and data flow.

### API ROUTES

-   Handle errors gracefully in API routes.
-   Return informative error messages to the client.

### GITHUB API

-   Handle GitHub API authentication and errors properly.

### OPENAI API

-   Handle OpenAI API authentication and errors properly.

## FILE STRUCTURE

-   Project uses the standard Next.js file structure.
-   GitHub repository structure:

```text
your-newsletter-data-repo/
‚îú‚îÄ‚îÄ links/
‚îÇ   ‚îî‚îÄ‚îÄ 2025/
‚îÇ       ‚îî‚îÄ‚îÄ 01/           # Month-based organization
‚îÇ           ‚îî‚îÄ‚îÄ links.json
‚îî‚îÄ‚îÄ newsletters/
    ‚îî‚îÄ‚îÄ 2025-W03/         # Week-based organization
        ‚îî‚îÄ‚îÄ newsletter.json
‚îú‚îÄ‚îÄ links/archive/
‚îÇ   ‚îî‚îÄ‚îÄ 2025/
‚îÇ       ‚îî‚îÄ‚îÄ 06/           # Month-based organization
‚îÇ           ‚îî‚îÄ‚îÄ archived-links.json
```

## NEWSLETTER TEMPLATE

-   The AI generates newsletters with this structure:
    -   üõ†Ô∏è AI Tools Worth Checking Out: New AI tools you've saved
    -   ü§ñ New AI Models to Explore: Latest AI models
    -   üìö Interesting Reads: Articles and other content
    -   üí≠ Weekly Learnings & Insights: Your condensed thoughts and reflections
- The AI is inspired by "the news" style.
-   The newsletter should be structured like this:
    1.  Friendly greeting/intro paragraph (like "nada sozinho" style)
    2.  "This Week's Edition" summary with bullet points of what's included
    3.  Individual sections with clear headers and emojis
    4.  Personal, approachable, and genuinely helpful tone
-   Newsletter tone: Direct, straight to the point, stoic yet friendly.
    -   Pre-links: Max one line.
    -   Links list: Title of the link in bold (clickable), followed by the summary underneath. No extra context needed.
    -   Footer: One line asking for feedback.

## USER INTERFACE & USER EXPERIENCE

-   The UI and UX of this project should emulate design principles from Linear, Motion UI, Uber, and Airbnb.
-   The UI and UX of this project must be simple, minimal, and intuitive, without being overwhelming.
-   The UI and UX must feel modern, without being too over the top.
-   The user experience should feel like the user is following a story.
-   The homepage UI/UX should be revamped to create a more product-focused, story-driven experience.
-   If everything is setup (e.g., API keys), the settings should not be visible to the user. We should only show about the API keys in case the user has never set it up.
-   The homepage must adapt based on user configuration status.
-   The homepage should implement smart routing: unconfigured users go to settings, configured users to main features.
-   The homepage should have a clear narrative: "Collect ‚Üí Generate ‚Üí Export".
-   The main flows of the homepage should be prominently displayed as the primary story, with secondary features (past newsletters) appropriately de-emphasized.
-   The homepage should have direct, action-oriented copy: "Build your newsletter in minutes".
-   The homepage should have a card-based layout with subtle interactions.
-   The homepage should maintain consistent spacing and typography using existing design system.
-   The homepage should use a neutral color palette with purposeful contrast.
-   The homepage should have subtle process indicator for configured users.
-   The homepage should have clear calls-to-action that guide users to the right next step.
-   The homepage should have hover states with subtle color transitions.
-   The card-based navigation on the homepage should feel native to product tools.
-   The homepage should implement progressive enhancement for different user states.
-   Ensure every page is mobile-friendly.
-   The "add links" feature must be super easy to use on mobile, with a simplified flow, auto-focus, and a mobile-first design.
    -   On mobile, the modal should slide up from the bottom like WhatsApp.
    -   The modal should take up the full screen on mobile for maximum usability.
    -   All buttons and inputs should be sized for fingers, not cursors.
    -   The URL input should get focus immediately when opened.
    -   The experience should be as simple as: Tap floating + button (or header button), Paste URL (auto-detects category), Tap category if needed (visual selection), Hit Enter or tap Save.

## LINKS PAGE

-   Links on the links page (`@page.tsx`) must be displayed in a table format with tabs for "Active Links" and "Archived Links".
-   The "Archived Links" button should be a tab on the table.
-   The "Create Newsletter" CTA must be removed from the bottom of the links page.
-   A lazy-loaded view for archived links must be implemented.
    -   Archived links are retrieved from the `links/archive/` directory structure.
-   Ensure `cursor-pointer` is applied to all clickable elements: tab buttons, link URLs (both active and archived), action buttons (open link, delete link), modal buttons (Cancel, AI Summarize, Save Link), and the "Add Your First Link" button.
-   Auto-summarization:
    -   Auto-summarization is optional and disabled by default.
    -   The "Auto-summarization" toggle is displayed in the OpenAI API section of the settings page.
    -   The toggle is only shown when an OpenAI API key is configured.
    -   The default state is disabled (false).
    -   The setting is saved as `auto_summarize` in localStorage.
    -   The links page loads the auto-summarization preference on page load.
    -   Auto-summarization is only triggered when:
        -   URL is pasted
        -   OpenAI API key exists
        -   Auto-summarization is enabled in settings
        -   Title and description are empty
        -   1 second delay has passed
    -   The "‚ú® Auto-fill with AI" button is always available regardless of the setting.

## BUILD PAGE

-   The newsletter preview should be editable after generation and before export.
-   The order of links in the newsletter should be easily sortable, potentially via drag-and-drop functionality.
-   Drag-and-Drop Link Sorting:
    -   Use `@dnd-kit` library for smooth drag-and-drop functionality
    -   Create a `SortableLinkItem` component with drag handles (‚ãÆ‚ãÆ)
    -   Links can be reordered by dragging them up or down
    -   Visual feedback with opacity changes during dragging
-   Editable Newsletter Preview:
    -   Add an "Edit" button next to the Newsletter Preview title
    -   When clicked, transform the preview into an editable rich-text area
    -   Use `react-contenteditable` for in-place editing
    -   Add a "Save Changes" button to confirm edits
    -   All export functions (JSON, Kit.com, Copy) should use the edited content