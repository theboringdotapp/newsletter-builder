{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/artfloriani/Documents/Projects/theboringapp/newsletter-builder/newsletter-builder/src/lib/github.ts"],"sourcesContent":["import { Octokit } from \"@octokit/rest\";\nimport { SavedLink, NewsletterData } from \"@/types\";\n\nexport class GitHubStorage {\n  private octokit: Octokit;\n  private owner: string;\n  private repo: string;\n  private branch: string;\n\n  constructor() {\n    this.octokit = new Octokit({\n      auth: process.env.GITHUB_TOKEN,\n    });\n    this.owner = process.env.GITHUB_OWNER!;\n    this.repo = process.env.GITHUB_REPO!;\n    this.branch = process.env.GITHUB_BRANCH || \"main\";\n  }\n\n  async saveLink(link: SavedLink): Promise<void> {\n    const path = `links/${new Date().getFullYear()}/${String(\n      new Date().getMonth() + 1\n    ).padStart(2, \"0\")}/links.json`;\n\n    try {\n      // Get existing links\n      const existingLinks = await this.getLinks();\n      const updatedLinks = [...existingLinks, link];\n\n      await this.saveFile(path, JSON.stringify(updatedLinks, null, 2));\n    } catch (error) {\n      console.error(\"Error saving link:\", error);\n      throw error;\n    }\n  }\n\n  async getLinks(year?: number, month?: number): Promise<SavedLink[]> {\n    const currentYear = year || new Date().getFullYear();\n    const currentMonth = month || new Date().getMonth() + 1;\n    const path = `links/${currentYear}/${String(currentMonth).padStart(\n      2,\n      \"0\"\n    )}/links.json`;\n\n    try {\n      const content = await this.getFile(path);\n      return content ? JSON.parse(content) : [];\n    } catch {\n      console.log(\"No existing links file found, returning empty array\");\n      return [];\n    }\n  }\n\n  async updateLinks(\n    links: SavedLink[],\n    year?: number,\n    month?: number\n  ): Promise<void> {\n    const currentYear = year || new Date().getFullYear();\n    const currentMonth = month || new Date().getMonth() + 1;\n    const path = `links/${currentYear}/${String(currentMonth).padStart(\n      2,\n      \"0\"\n    )}/links.json`;\n\n    await this.saveFile(path, JSON.stringify(links, null, 2));\n  }\n\n  async saveNewsletterData(data: NewsletterData): Promise<void> {\n    const path = `newsletters/${data.week}/newsletter.json`;\n    await this.saveFile(path, JSON.stringify(data, null, 2));\n  }\n\n  async getNewsletterData(week: string): Promise<NewsletterData | null> {\n    const path = `newsletters/${week}/newsletter.json`;\n\n    try {\n      const content = await this.getFile(path);\n      return content ? JSON.parse(content) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  private async getFile(path: string): Promise<string | null> {\n    try {\n      const response = await this.octokit.repos.getContent({\n        owner: this.owner,\n        repo: this.repo,\n        path,\n        ref: this.branch,\n      });\n\n      if (\"content\" in response.data) {\n        return Buffer.from(response.data.content, \"base64\").toString(\"utf-8\");\n      }\n      return null;\n    } catch (error: unknown) {\n      if (\n        error &&\n        typeof error === \"object\" &&\n        \"status\" in error &&\n        error.status === 404\n      ) {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  private async saveFile(path: string, content: string): Promise<void> {\n    try {\n      // Check if file exists to get SHA\n      let sha: string | undefined;\n      try {\n        const existingFile = await this.octokit.repos.getContent({\n          owner: this.owner,\n          repo: this.repo,\n          path,\n          ref: this.branch,\n        });\n        if (\"sha\" in existingFile.data) {\n          sha = existingFile.data.sha;\n        }\n      } catch (error: unknown) {\n        // File doesn't exist, that's fine\n        if (\n          !(\n            error &&\n            typeof error === \"object\" &&\n            \"status\" in error &&\n            error.status === 404\n          )\n        ) {\n          throw error;\n        }\n      }\n\n      await this.octokit.repos.createOrUpdateFileContents({\n        owner: this.owner,\n        repo: this.repo,\n        path,\n        message: `Update ${path}`,\n        content: Buffer.from(content).toString(\"base64\"),\n        branch: this.branch,\n        sha,\n      });\n    } catch (error) {\n      console.error(\"Error saving file:\", error);\n      throw error;\n    }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///Users/artfloriani/Documents/Projects/theboringapp/newsletter-builder/newsletter-builder/src/app/api/links/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { GitHubStorage } from \"@/lib/github\";\nimport { SavedLink } from \"@/types\";\n\nconst github = new GitHubStorage();\n\nexport async function GET() {\n  try {\n    const links = await github.getLinks();\n    return NextResponse.json(links);\n  } catch (error) {\n    console.error(\"Error fetching links:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch links\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const link: SavedLink = await request.json();\n    await github.saveLink(link);\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Error saving link:\", error);\n    return NextResponse.json({ error: \"Failed to save link\" }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: Request) {\n  try {\n    const links: SavedLink[] = await request.json();\n    await github.updateLinks(links);\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Error updating links:\", error);\n    return NextResponse.json(\n      { error: \"Failed to update links\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAGA,MAAM,SAAS,IAAI,sHAAA,CAAA,gBAAa;AAEzB,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,OAAO,QAAQ;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAkB,MAAM,QAAQ,IAAI;QAC1C,MAAM,OAAO,QAAQ,CAAC;QACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC3E;AACF;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,QAAqB,MAAM,QAAQ,IAAI;QAC7C,MAAM,OAAO,WAAW,CAAC;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}